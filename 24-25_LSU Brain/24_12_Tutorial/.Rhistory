plot(cars)
getwd()
library(GEOquery)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOquery")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOquery")
library(GEOquery)
my_id <- "GSE63477"
my_id <- "GSE63477"
gse <- getGEO(my_id)
length(gse)
gse <- gse[[1]]
gse
pData(gse)[1:2,]
fData(gse)[1,]
exprs(gse)[1,]
pData(gse)$data_processing[1]
summary(exprs(gse))
exprs(gse) <- log2(exprs(gse))
summary(exprs(gse))
boxplot(exprs(gse),outline=f)
boxplot(exprs(gse),outline=F)
sampleInfo <- pData(gse)
head(sampleInfo)
table(sampleInfo$characteristics_ch1.1)
library(dplyr)
sampleInfo <- select(sampleInfo, characteristics_ch1.1)
head(sampleInfo)
dim(sampleInfo)
sampleInfo$sample
#rename
sampleInfo <- rename(sampleInfo, sample=characteristics_ch1.1)
head(sampleInfo)
dim(sampleInfo)
sampleInfo$sample
library(stringr)
sampleInfo$group <- ""
for(i in 1:nrow(sampleInfo)){
if(str_detect(sampleInfo$sample[i], "CTRL") && str_detect(sampleInfo$sample[i], "full"))
{sampleInfo$group[i] <- "Conf"}
if(str_detect(sampleInfo$sample[i], "CTRL") && str_detect(sampleInfo$sample[i], "dextran"))
{sampleInfo$group[i] <- "Cond"}
if(str_detect(sampleInfo$sample[i], "cabazitaxel") && str_detect(sampleInfo$sample[i], "full"))
{sampleInfo$group[i] <- "cabazitaxelf"}
if(str_detect(sampleInfo$sample[i], "cabazitaxel") && str_detect(sampleInfo$sample[i], "dextran"))
{sampleInfo$group[i] <- "cabazitaxeld"}
if(str_detect(sampleInfo$sample[i], "docetaxel") && str_detect(sampleInfo$sample[i], "full"))
{sampleInfo$group[i] <- "docetaxelf"}
if(str_detect(sampleInfo$sample[i], "docetaxel") && str_detect(sampleInfo$sample[i], "dextran"))
{sampleInfo$group[i] <- "docetaxeld"}
}
sampleInfo
sampleInfo$serum <- ""
for(i in 1:nrow(sampleInfo)){
if(str_detect(sampleInfo$sample[i], "dextran"))
{sampleInfo$serum[i] <- "dextran"}
if(str_detect(sampleInfo$sample[i], "full"))
{sampleInfo$serum[i] <- "full_serum"}
}
sampleInfo <- sampleInfo[,-1]
sampleInfo
library(pheatmap)
install.packages("pheatmap")
library(pheatmap)
## argument use="c" stops an error if there are any missing data points
corMatrix <- cor(exprs(gse),use="c")
pheatmap(corMatrix)
rownames(sampleInfo)
colnames(corMatrix)
## If not, force the rownames to match the columns
#rownames(sampleInfo) <- colnames(corMatrix)
pheatmap(corMatrix, annotation_col= sampleInfo)
if (!require("ggplot2", quietly = TRUE))
install.packages("ggplot2")
if (!require("ggplot2", quietly = TRUE))
install.packages("ggplot2")
if (!require("ggrepel", quietly = TRUE))
install.packages("ggrepel")
#make PCA
library(ggplot2)
library(ggrepel)
## MAKE SURE TO TRANSPOSE THE EXPRESSION MATRIX
pca <- prcomp(t(exprs(gse)))
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=group, label=paste("",group))) + geom_point() + geom_text_repel()
if (!require("limma", quietly = TRUE))
install.packages("limma")
library(limma)
design <- model.matrix(~0 + sampleInfo$group)
design
## the column names are a bit ugly, so we will rename
colnames(design) <- c("Cabazitaxeld","Cabazitaxelf","Cond","Conf","Docetaxeld","Docetaxelf")
design
## calculate median expression level
cutoff <- median(exprs(gse))
## TRUE or FALSE for whether each gene is "expressed" in each sample
is_expressed <- exprs(gse) > cutoff
## Identify genes expressed in more than 2 samples
keep <- rowSums(is_expressed) > 3
## check how many genes are removed / retained.
table(keep)
## subset to just those expressed genes
gse <- gse[keep,]
aw
# coping with outliers
## calculate relative array weights
aw <- arrayWeights(exprs(gse),design)
aw
## Fitting the coefficients
fit <- lmFit(exprs(gse), design,
weights = aw)
head(fit$coefficients)
## Making comparisons between samples, can define multiple contrasts
contrasts <- makeContrasts(Docetaxeld - Cond, Cabazitaxeld - Cond, Docetaxelf - Conf, Cabazitaxelf - Conf, levels = design)
fit2 <- contrasts.fit(fit, contrasts)
fit2 <- eBayes(fit2)
topTable(fit2)
topTable1 <- topTable(fit2, coef=1)
topTable2 <- topTable(fit2, coef=2)
topTable3 <- topTable(fit2, coef=3)
topTable4 <- topTable(fit2, coef=4)
#if we want to know how many genes are differentially expressed overall, we can use the decideTest function.
summary(decideTests(fit2))
table(decideTests(fit2))
anno <- fData(gse)
head(anno)
anno <- select(anno,ID,GB_ACC)
fit2$genes <- anno
topTable(fit2)
## Create volcano plot
full_results1 <- topTable(fit2, coef=1, number=Inf)
library(ggplot2)
ggplot(full_results1,aes(x = logFC, y=B)) + geom_point()
## change according to your needs
p_cutoff <- 0.05
fc_cutoff <- 1
full_results1 %>%
mutate(Significant = P.Value < p_cutoff, abs(logFC) > fc_cutoff ) %>%
ggplot(aes(x = logFC, y = B, col=Significant)) + geom_point()
## Get the results for particular gene of interest
#GB_ACC for Nkx3-1 is NM_001256339 or NM_006167
##no NM_001256339 in this data
full_results2 <- topTable(fit2, coef=2, number=Inf)
full_results3 <- topTable(fit2, coef=3, number=Inf)
full_results4 <- topTable(fit2, coef=4, number=Inf)
filter(full_results1, GB_ACC == "NM_006167")
filter(full_results2, GB_ACC == "NM_006167")
filter(full_results3, GB_ACC == "NM_006167")
filter(full_results4, GB_ACC == "NM_006167")
